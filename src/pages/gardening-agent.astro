---
import Layout from '../layouts/Layout.astro';
import GardenAgent from '../components/garden/GardenAgent';
import GardeningCalendar from '../components/garden/GardeningCalendar';

// Ensure this page is always server-rendered
export const prerender = false;
---

<Layout title="Gardening Agent - Your Interactive Garden Assistant">
  <main class="container mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold mb-2 text-center">Gardening Agent</h1>
    <p class="text-center text-base-content/70 mb-4 max-w-2xl mx-auto">
      Chat with our gardening assistant powered by Google Vertex AI to get personalized advice, plant recommendations, and seasonal task suggestions for your Irish garden.
    </p>
    
    <div class="max-w-5xl mx-auto mb-8">
      <GardenAgent client:load id="garden-agent" />
    </div>

    <!-- Calendar is hidden by default, will be shown when task queries are made -->
    <div id="calendar-container" class="max-w-5xl mx-auto my-8 hidden">
      <GardeningCalendar client:load months={3} />
    </div>

    <div class="max-w-2xl mx-auto mt-8 p-4 bg-base-200 rounded-box">
      <h2 class="text-xl font-bold mb-2">How to Use the Gardening Agent</h2>
      <ul class="list-disc pl-5 space-y-2">
        <li>Ask for <strong>plant recommendations</strong> based on your garden conditions</li>
        <li>Get <strong>seasonal gardening tasks</strong> tailored to Irish weather</li>
        <li>Learn about <strong>soil improvement techniques</strong> specific to your region</li>
        <li>Discover <strong>sustainability practices</strong> for eco-friendly gardening</li>
        <li>Find <strong>solutions for common garden problems</strong> like pests and diseases</li>
      </ul>
    </div>
  </main>
</Layout>

<script>
  // Client-side script to handle communication between GardenAgent and Calendar
  document.addEventListener('DOMContentLoaded', () => {
    const calendarContainer = document.querySelector('#calendar-container');
    
    // Listen for task cards event
    window.addEventListener('task-cards-available', (event) => {
      if (calendarContainer && event.detail && event.detail.tasks) {
        // Format tasks for the calendar component
        const formattedTasks = formatTasksForCalendar(event.detail.tasks, event.detail.monthInfo);
        
        // Update the calendar component but don't show it unless requested
        if (window.updateGardeningCalendar) {
          window.updateGardeningCalendar(formattedTasks);
        }
        
        // Only show calendar if explicitly requested
        if (event.detail.showCalendar) {
          calendarContainer.classList.remove('hidden');
        }
      }
    });
  });

  // Helper function to format task cards for the calendar
  function formatTasksForCalendar(tasks, monthInfo) {
    let month = new Date().getMonth() + 1; // Default to current month (May 2025 = 5)
    let months = 3; // Default to showing 3 months
    let isSingleMonth = false;
    
    // If specific month info is provided, use it
    if (monthInfo) {
      if (monthInfo.month) {
        month = monthInfo.month;
      }
      
      if (monthInfo.months) {
        months = monthInfo.months;
      }
      
      // If a specific individual month is requested (like December)
      if (monthInfo.isSingleMonth) {
        months = 1;
        isSingleMonth = true;
      }
    }
    
    // Special handling for seasons
    if (monthInfo && monthInfo.season) {
      if (monthInfo.season.toLowerCase() === 'spring') {
        month = 3; // March
        months = 3; // March, April, May
        isSingleMonth = false;
      } else if (monthInfo.season.toLowerCase() === 'summer') {
        month = 6; // June
        months = 3; // June, July, August
        isSingleMonth = false;
      } else if (monthInfo.season.toLowerCase() === 'autumn' || monthInfo.season.toLowerCase() === 'fall') {
        month = 9; // September
        months = 3; // September, October, November
        isSingleMonth = false;
      } else if (monthInfo.season.toLowerCase() === 'winter') {
        month = 12; // December
        months = 3; // December, January, February
        isSingleMonth = false;
      }
    }
    
    // Create an array of month objects
    const formattedTasks = [];
    
    // Create month objects for the specified number of months
    for (let i = 0; i < months; i++) {
      const currentMonth = ((month + i - 1) % 12) + 1; // Handle December -> January wraparound
      const monthName = new Date(2025, currentMonth - 1, 1).toLocaleString('default', { month: 'long' });
      
      formattedTasks.push({
        month: currentMonth,
        name: monthName,
        tasks: tasks.map(t => t.data)
      });
    }
    
    return formattedTasks;
  }
</script>