---
import { getCollection } from 'astro:content';
import DocsLayout from '../../layouts/DocsLayout.astro';

export const prerender = true;

// Get all documentation entries
const docs = await getCollection('docs');

// Group docs by category
const docsByCategory = docs.reduce((acc, doc) => {
  const category = doc.data.category || 'general';
  if (!acc[category]) {
    acc[category] = [];
  }
  acc[category].push(doc);
  return acc;
}, {});

// Sort the docs within each category by title
Object.keys(docsByCategory).forEach(category => {
  docsByCategory[category].sort((a, b) => 
    a.data.title.localeCompare(b.data.title)
  );
});

// Sort categories with general and getting started first
const categoryOrder = ['general', 'arch', 'devel-phases', 'research'];
const sortedCategories = Object.keys(docsByCategory).sort((a, b) => {
  const indexA = categoryOrder.indexOf(a);
  const indexB = categoryOrder.indexOf(b);
  if (indexA === -1 && indexB === -1) return a.localeCompare(b);
  if (indexA === -1) return 1;
  if (indexB === -1) return -1;
  return indexA - indexB;
});

// Create frontmatter for the layout
const frontmatter = {
  title: "Bloom Documentation",
  description: "Comprehensive documentation for the Bloom gardening assistant project"
};

// Get a color for each category
const categoryColors = {
  'arch': 'primary',
  'devel-phases': 'secondary',
  'research': 'accent',
  'general': 'info'
};

// Get display names for categories
const categoryNames = {
  'arch': 'Architecture',
  'devel-phases': 'Development Phases',
  'research': 'Research',
  'general': 'General'
};

// Find getting started guide for quick link
const gettingStartedDoc = docs.find(doc => 
  doc.slug.includes('getting-started') || 
  doc.data.title.includes('Getting Started')
);
---

<DocsLayout frontmatter={frontmatter}>
  <div class="space-y-8">
    <div class="prose max-w-none">
      <h1>Welcome to Bloom Documentation</h1>
      <p class="lead text-lg">
        This documentation covers all aspects of Bloom, the AI-powered gardening assistant designed specifically for Irish gardeners.
      </p>
      
      <p>
        Bloom combines modern web technologies with AI to provide personalized gardening advice, plant recommendations, 
        seasonal planning tools, and sustainability tracking tailored to Irish growing conditions.
      </p>
    </div>

    <!-- Quick Start Card -->
    <div class="card bg-base-200 border border-base-300 shadow-md">
      <div class="card-body">
        <h2 class="card-title text-primary">Quick Start</h2>
        <div class="flex flex-col md:flex-row gap-6">
          <div class="flex-1">
            <h3 class="font-bold mb-2">Development Setup</h3>
            <div class="space-y-2">
              <div class="bg-base-100 border border-base-300 p-3 rounded-md">
                <code class="text-success">npm install</code>
                <p class="text-xs mt-1">Install all dependencies</p>
              </div>
              <div class="bg-base-100 border border-base-300 p-3 rounded-md">
                <code class="text-success">npm run dev</code>
                <p class="text-xs mt-1">Start development server</p>
              </div>
              <div class="bg-base-100 border border-base-300 p-3 rounded-md">
                <code class="text-success">npm run build</code>
                <p class="text-xs mt-1">Build for production</p>
              </div>
            </div>
          </div>
          <div class="flex-1">
            <h3 class="font-bold mb-2">Key Resources</h3>
            <ul class="space-y-2">
              {gettingStartedDoc && (
                <li>
                  <a href={`/docs/${gettingStartedDoc.slug}`} class="btn btn-outline btn-primary btn-sm btn-block justify-start">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
                    </svg>
                    Getting Started Guide
                  </a>
                </li>
              )}
              <li>
                <a href="/docs/arch/01-architecture-overview" class="btn btn-outline btn-sm btn-block justify-start">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                  </svg>
                  Architecture Overview
                </a>
              </li>
              <li>
                <a href="/docs/devel-phases/phase-dependencies" class="btn btn-outline btn-sm btn-block justify-start">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                  </svg>
                  Development Phases
                </a>
              </li>
            </ul>
          </div>
        </div>
      </div>
    </div>

    <!-- Dashboard Links -->
    <div class="card bg-base-100 shadow-xl mb-6">
      <div class="card-body">
        <h2 class="card-title">Admin Dashboards</h2>
        <p class="text-sm mb-4">
          Bloom includes several administrative interfaces for monitoring and management:
        </p>
        
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
          <a href="/admin/dashboard" class="card bg-base-200 hover:bg-base-300 transition-colors">
            <div class="card-body p-4">
              <h3 class="font-bold">Main Dashboard</h3>
              <p class="text-xs">System overview and key metrics</p>
            </div>
          </a>
          
          <a href="/admin/logs-dashboard" class="card bg-base-200 hover:bg-base-300 transition-colors">
            <div class="card-body p-4">
              <h3 class="font-bold">Logs Dashboard</h3>
              <p class="text-xs">Application logs and debugging</p>
            </div>
          </a>
          
          <a href="/admin/unified-logs" class="card bg-base-200 hover:bg-base-300 transition-colors">
            <div class="card-body p-4">
              <h3 class="font-bold">Unified Logs</h3>
              <p class="text-xs">Centralized logging system</p>
            </div>
          </a>
        </div>
      </div>
    </div>

    <!-- Documentation Categories -->
    <div class="card bg-base-100 shadow-xl">
      <div class="card-body p-0">
        <!-- Tabs for categories -->
        <div role="tablist" class="tabs tabs-lifted">
          {sortedCategories.map((category, index) => (
            <a 
              role="tab" 
              class={`tab ${index === 0 ? 'tab-active' : ''} ${categoryColors[category] ? `text-${categoryColors[category]}` : ''}`}
              data-category={category}
            >
              {categoryNames[category] || category.charAt(0).toUpperCase() + category.slice(1)}
            </a>
          ))}
        </div>

        <!-- Tab content -->
        {sortedCategories.map((category, index) => (
          <div 
            class={`category-content p-6 ${index === 0 ? 'block' : 'hidden'}`} 
            id={`content-${category}`}
          >
            <div class="flex items-center gap-2 mb-4">
              <div class={`badge badge-${categoryColors[category] || 'primary'} badge-lg`}></div>
              <h2 class="text-2xl font-bold capitalize">{categoryNames[category] || category}</h2>
            </div>
            
            <div class="overflow-x-auto">
              <table class="table table-zebra w-full">
                <thead>
                  <tr>
                    <th>Document</th>
                    <th>Description</th>
                  </tr>
                </thead>
                <tbody>
                  {docsByCategory[category].map(doc => (
                    <tr class="hover">
                      <td>
                        <a 
                          href={`/docs/${doc.slug}`} 
                          class="link link-primary font-medium"
                        >
                          {doc.data.title}
                        </a>
                      </td>
                      <td>
                        {doc.data.description || 
                         `Documentation for ${doc.data.title.toLowerCase()}`}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        ))}
      </div>
    </div>
  </div>
</DocsLayout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const tabs = document.querySelectorAll('.tabs [role="tab"]');
    const contents = document.querySelectorAll('.category-content');
    
    tabs.forEach(tab => {
      tab.addEventListener('click', () => {
        // Remove active from all tabs
        tabs.forEach(t => t.classList.remove('tab-active'));
        // Add active to clicked tab
        tab.classList.add('tab-active');
        
        // Hide all content
        contents.forEach(c => c.classList.add('hidden'));
        
        // Show selected content
        const category = tab.getAttribute('data-category');
        const content = document.getElementById(`content-${category}`);
        if (content) {
          content.classList.remove('hidden');
        }
      });
    });
  });
</script>